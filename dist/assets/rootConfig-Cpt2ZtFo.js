const m=()=>{},y=e=>{Object.freeze&&Object.freeze(e)};function S(e,t,r){var o,n;const l=t.join(".");return(o=r)[n=l]??(o[n]=new Proxy(m,{get(_,c){if(!(typeof c!="string"||c==="then"))return S(e,[...t,c],r)},apply(_,c,s){const f=t[t.length-1];let i={args:s,path:t};return f==="call"?i={args:s.length>=2?[s[1]]:[],path:t.slice(0,-1)}:f==="apply"&&(i={args:s.length>=2?s[1]:[],path:t.slice(0,-1)}),y(i.args),y(i.path),e(i)}})),r[l]}const D=e=>S(e,[],Object.create(null)),E=e=>new Proxy(m,{get(t,r){if(r!=="then")return e(r)}});function T(e,...t){const r=Object.assign(Object.create(null),e);for(const o of t)for(const n in o){if(n in r&&r[n]!==o[n])throw new Error(`Duplicate key ${n}`);r[n]=o[n]}return r}function u(e){return!!e&&!Array.isArray(e)&&typeof e=="object"}function v(e){return typeof e=="function"}function R(e){return Object.assign(Object.create(null),e)}const I=typeof Symbol=="function"&&!!Symbol.asyncIterator;function x(e){return I&&u(e)&&Symbol.asyncIterator in e}function P(e){return"input"in e?e:{input:e,output:e}}const A={input:{serialize:e=>e,deserialize:e=>e},output:{serialize:e=>e,deserialize:e=>e}};function z(e,t){if("error"in e){const o=t.deserialize(e.error);return{ok:!1,error:{...e,error:o}}}return{ok:!0,result:{...e.result,...(!e.result.type||e.result.type==="data")&&{type:"data",data:t.deserialize(e.result.data)}}}}class a extends Error{constructor(){super("Unable to transform response from server")}}function K(e,t){let r;try{r=z(e,t)}catch{throw new a}if(!r.ok&&(!u(r.error.error)||typeof r.error.error.code!="number"))throw new a;if(r.ok&&!u(r.result))throw new a;return r}var b,d;(b=Symbol).dispose??(b.dispose=Symbol());(d=Symbol).asyncDispose??(d.asyncDispose=Symbol());var p,w,h,O,g,j;const k=typeof window>"u"||"Deno"in window||((w=(p=globalThis.process)==null?void 0:p.env)==null?void 0:w.NODE_ENV)==="test"||!!((O=(h=globalThis.process)==null?void 0:h.env)!=null&&O.JEST_WORKER_ID)||!!((j=(g=globalThis.process)==null?void 0:g.env)!=null&&j.VITEST_WORKER_ID);export{E as a,x as b,D as c,A as d,v as e,k as f,P as g,u as i,T as m,R as o,K as t};
